#!/usr/bin/env python3

# Inne Lemstra
# Michiel Merkx

# for Python version 3.4 or higher

# requires instalation of mysqlclient (https://pypi.python.org/pypi/mysqlclient)
# requires instalation of SAMtools (http://samtools.sourceforge.net/)
# requires instalation of QualiMap (http://qualimap.bioinfo.cipf.es/)
# requires access to MySQL database

# run from folder where benchmark output data is stored.
# input required for function:
# [name of benchmark file] [name of mapper output file]
# eg: benchmark.txt pairedAlignment.sam


#import gzip
import MySQLdb as mysqlclient
import subprocess
import re


## note path for var Qualimap points to Qualimap install path
Qualimap = '~/Documents/qualimap_v2.2.1/qualimap'

FileName = input('File name:\n').split()


InFile = open(FileName[0], 'r')

## sends command to the terminal to sort the mapping tool results using SAMtools
## sends command to the terminal to initiate quality controll using QualiMap
## note that output files and folders are generated in the location from which the script is executed

subprocess.call("samtools sort -o sorted_output.sam {0}".format(FileName[1]),shell=True)
subprocess.call(Qualimap +" bamqc -bam sorted_output.sam -outdir qualimap_results",shell=True,executable='/bin/bash')



## search the output file generated by QualiMap for the required data
## uses three seperate regular expression searches:
## 'number or reads' for total reads in file
## 'number of mapped reads' for total number of reads mapped
## 'mean mapping quality' for the quality of the mapping result


ResultFile = open('./qualimap_results/genome_results.txt', 'r')

Mapped = []
SearchFile = ResultFile.read()

#print(type(SearchFile))
ReSearch1 = r"number of reads = (\d+,\d*)"
Search1 = re.search(ReSearch1, SearchFile)
number_reads = Search1.group(1).replace(',','')

Mapped.append(number_reads)

ReSearch2 = r"number of mapped reads = (\d+,\d*) .*"
Search2 = re.search(ReSearch2, SearchFile)
mapped_reads = Search2.group(1).replace(',','')

Mapped.append(mapped_reads)

ReSearch3 = r"mean mapping quality = (\d+.\d*)"
Search3 = re.search(ReSearch3, SearchFile)

mapped_quality = Search3.group(1)

Mapped.append(mapped_quality)


#print(Mapped)


## opens connection to MySQL server

MyClient = mysqlclient.connect(host = "localhost", user= "root", passwd= "", db="SRA")
MyCursor = MyClient.cursor()

#UseDatabase = """USE SRA;"""
#MyCursor.execute(UseDatabase)


## executes for loop in case there are multiple lines in benchmark files
## formats a MySQL input command with benchmark information generated by the client
## formats MySQL input command with mapping quality alignment generated by QualiMap

for Line in InFile:
	
	InputData = Line.split(',')

	print('Adding data:\n',InputData[0],InputData[1],InputData[2],InputData[3],Mapped[0],Mapped[1],Mapped[2],InputData[4],InputData[5])

	InsertData = """INSERT INTO results SET
	    SRA_ID='{0}',
	    aligner_ID='{1}',
	    proccess_time={2},
	    align_time={3},
	    number_reads={4},
	    mapped_reads={5},
	    mapped_quality={6},
	    cpu='{7}',
	    ram='{8}';""".format(InputData[0],InputData[1],InputData[2],InputData[3],Mapped[0],Mapped[1],Mapped[2],InputData[4],InputData[5])


MyCursor.execute(InsertData)
MyClient.commit()

## close connection to the MySQL server

MyCursor.close()
MyClient.close()

print ("Data successfully added")
